import React, { useState, useEffect } from 'react';
import { Suggestion } from '@/entities/Suggestion';
import { MessageCircle, Send, Lightbulb, AlertCircle } from 'lucide-react';
import { format } from 'date-fns';
import { ko } from 'date-fns/locale';

import NeumorphicCard from '../components/neumorphic/NeumorphicCard';
import NeumorphicButton from '../components/neumorphic/NeumorphicButton';
import NeumorphicInput from '../components/neumorphic/NeumorphicInput';
import NeumorphicSelect from '../components/neumorphic/NeumorphicSelect';

const categories = ["방송개선", "음악선곡", "이벤트제안", "기술문제", "기타"];

const statusInfo = {
  "접수": { color: "text-blue-600", bg: "bg-blue-100" },
  "검토중": { color: "text-yellow-600", bg: "bg-yellow-100" },
  "완료": { color: "text-green-600", bg: "bg-green-100" },
  "보류": { color: "text-gray-600", bg: "bg-gray-100" }
};

const priorityInfo = {
  "낮음": { color: "text-gray-600", bg: "bg-gray-100" },
  "보통": { color: "text-blue-600", bg: "bg-blue-100" },
  "높음": { color: "text-red-600", bg: "bg-red-100" }
};

export default function Suggestions() {
  const [suggestions, setSuggestions] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    category: '',
    submitter_name: ''
  });

  useEffect(() => {
    loadSuggestions();
  }, []);

  const loadSuggestions = async () => {
    setIsLoading(true);
    try {
      const data = await Suggestion.list('-created_date', 20);
      setSuggestions(data);
    } catch (error) {
      console.error('건의사항 로딩 실패:', error);
    }
    setIsLoading(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.title || !formData.content || !formData.submitter_name) {
      alert('필수 항목을 모두 입력해주세요.');
      return;
    }

    setIsSubmitting(true);
    try {
      await Suggestion.create(formData);
      setFormData({
        title: '',
        content: '',
        category: '',
        submitter_name: ''
      });
      await loadSuggestions();
      alert('건의사항이 등록되었습니다!');
    } catch (error) {
      console.error('건의사항 등록 실패:', error);
      alert('건의사항 등록에 실패했습니다. 다시 시도해주세요.');
    }
    setIsSubmitting(false);
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center mb-12">
        <div className="neumorphic w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6">
          <MessageCircle className="w-10 h-10 text-purple-600" />
        </div>
        <h1 className="text-4xl font-bold text-gray-800 mb-4">건의사항</h1>
        <p className="text-lg text-gray-600">더 나은 방송을 위한 여러분의 의견을 들려주세요</p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Suggestion Form */}
        <NeumorphicCard>
          <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
            <div className="neumorphic w-10 h-10 rounded-full flex items-center justify-center">
              <Lightbulb className="w-5 h-5 text-purple-600" />
            </div>
            건의하기
          </h2>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                제목 <span className="text-red-500">*</span>
              </label>
              <NeumorphicInput
                placeholder="건의사항 제목을 입력하세요"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
              />
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  분류
                </label>
                <NeumorphicSelect
                  options={categories}
                  value={formData.category}
                  onChange={(value) => handleInputChange('category', value)}
                  placeholder="분류 선택"
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">
                  이름/별명 <span className="text-red-500">*</span>
                </label>
                <NeumorphicInput
                  placeholder="이름 또는 별명을 입력하세요"
                  value={formData.submitter_name}
                  onChange={(e) => handleInputChange('submitter_name', e.target.value)}
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                내용 <span className="text-red-500">*</span>
              </label>
              <NeumorphicInput
                multiline
                rows={6}
                placeholder="건의사항을 자세히 설명해주세요"
                value={formData.content}
                onChange={(e) => handleInputChange('content', e.target.value)}
              />
            </div>

            <NeumorphicButton
              type="submit"
              disabled={isSubmitting}
              variant="primary"
              className="w-full py-4 text-lg"
            >
              {isSubmitting ? '등록 중...' : '건의사항 등록하기'}
            </NeumorphicButton>
          </form>
        </NeumorphicCard>

        {/* Recent Suggestions */}
        <NeumorphicCard>
          <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-3">
            <div className="neumorphic w-10 h-10 rounded-full flex items-center justify-center">
              <AlertCircle className="w-5 h-5 text-purple-600" />
            </div>
            최근 건의사항
          </h2>

          <div className="space-y-4 max-h-96 overflow-y-auto">
            {isLoading ? (
              Array(5).fill(0).map((_, i) => (
                <div key={i} className="neumorphic-inset rounded-2xl p-4 animate-pulse">
                  <div className="h-4 bg-gray-300 rounded mb-2"></div>
                  <div className="h-3 bg-gray-300 rounded w-3/4 mb-2"></div>
                  <div className="h-8 bg-gray-300 rounded"></div>
                </div>
              ))
            ) : suggestions.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                아직 건의사항이 없습니다.
              </div>
            ) : (
              suggestions.map((suggestion) => (
                <div key={suggestion.id} className="neumorphic-inset rounded-2xl p-4">
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-gray-800 flex-1">{suggestion.title}</h3>
                    <div className="flex gap-2 ml-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusInfo[suggestion.status]?.bg} ${statusInfo[suggestion.status]?.color}`}>
                        {suggestion.status}
                      </span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${priorityInfo[suggestion.priority]?.bg} ${priorityInfo[suggestion.priority]?.color}`}>
                        {suggestion.priority}
                      </span>
                    </div>
                  </div>
                  
                  {suggestion.category && (
                    <div className="mb-2">
                      <span className="inline-block bg-gray-200 text-gray-700 px-2 py-1 rounded-full text-xs">
                        {suggestion.category}
                      </span>
                    </div>
                  )}
                  
                  <p className="text-sm text-gray-600 mb-3 line-clamp-3">{suggestion.content}</p>
                  
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <span>{suggestion.submitter_name}</span>
                    <span>{format(new Date(suggestion.created_date), 'MM/dd HH:mm', { locale: ko })}</span>
                  </div>
                </div>
              ))
            )}
          </div>
        </NeumorphicCard>
      </div>
    </div>
  );
}
