import React from 'react';

export default function NeumorphicCard({ children, className = "", inset = false, hover = false }) {
  const baseClass = inset ? 'neumorphic-inset' : 'neumorphic';
  const hoverClass = hover ? 'hover:shadow-lg hover:-translate-y-1' : '';
  
  return (
    <div className={`${baseClass} ${hoverClass} rounded-3xl p-6 ${className}`}>
      {children}
    </div>
  );
}

import React from 'react';

export default function NeumorphicButton({ 
  children, 
  onClick, 
  className = "", 
  disabled = false,
  type = "button",
  variant = "default"
}) {
  const variantClasses = {
    default: "text-gray-700 hover:text-purple-600",
    primary: "text-purple-600 font-semibold",
    success: "text-green-600 font-semibold",
    danger: "text-red-600 font-semibold"
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`neumorphic-button px-6 py-3 rounded-2xl font-medium transition-all duration-200 ${variantClasses[variant]} ${
        disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
      } ${className}`}
    >
      {children}
    </button>
  );
}

import React from 'react';

export default function NeumorphicInput({ 
  placeholder, 
  value, 
  onChange, 
  type = "text",
  className = "",
  multiline = false,
  rows = 3
}) {
  const baseClasses = "neumorphic-input w-full px-4 py-3 rounded-2xl text-gray-700 placeholder-gray-500 resize-none";

  if (multiline) {
    return (
      <textarea
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        rows={rows}
        className={`${baseClasses} ${className}`}
      />
    );
  }

  return (
    <input
      type={type}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      className={`${baseClasses} ${className}`}
    />
  );
}

import React, { useState } from 'react';
import { ChevronDown } from 'lucide-react';

export default function NeumorphicSelect({ 
  options, 
  value, 
  onChange, 
  placeholder = "선택해주세요",
  className = ""
}) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className={`relative ${className}`}>
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="neumorphic-input w-full px-4 py-3 rounded-2xl text-gray-700 flex items-center justify-between text-left"
      >
        <span className={value ? 'text-gray-700' : 'text-gray-500'}>
          {value || placeholder}
        </span>
        <ChevronDown className={`w-4 h-4 text-gray-500 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      
      {isOpen && (
        <div className="absolute top-full left-0 right-0 mt-2 neumorphic rounded-2xl py-2 z-10 max-h-60 overflow-y-auto">
          {options.map((option) => (
            <button
              key={option}
              type="button"
              onClick={() => {
                onChange(option);
                setIsOpen(false);
              }}
              className="w-full px-4 py-3 text-left text-gray-700 hover:bg-gray-200 hover:bg-opacity-50 transition-colors duration-150"
            >
              {option}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
